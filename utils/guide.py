from SymDesignUtils import pretty_format_table
from PathUtils import no_term_constraint, no_evolution_constraint, no_hbnet, scout, program_command, select_sequences, \
    program_name, structure_background, current_energy_function, number_of_trajectories, force_flags
from DesignMetrics import master_metrics


general_rosetta_module_flags = \
    'If the script should be run multiple times, include the flag "--%s" INT. If the specific flags should be generated fresh use "--%s"' % (number_of_trajectories, force_flags)

interface_design_guide = \
    'interface_design initializes all the necessary data and job files to create protein sequences capable of forming a non-covalent interface between the components of interest, whether that interface be situated in a symmetric system or not. The choice of amino acid at each interface residue position can be constrained according to multiple requirements, all of which adopt the design philosophy that each individual residue should be modeled in it\'s position specific context. As the most important factor in interface design is whether the interface is capable of forming a bound complex, all modeling explores the prospects for a given interface using the sequence design process, broadly understood as sampling random amino acid types at each designable position while searching for the minima in a chosen energy function. Currently, the available landscape is sampled and scored according to the Rosetta Energy Function (currently %s). To perform this search successfully and quickly, we constrain each residue\'s available amino acid types according to the local environment. If no constraints are requested, pass the flag "--%s" and no sequence constraints will be used. Using evolutionarily allowed amino acids, defined as those amino acids present in sequence homologs to the protein of interest, we ensure that sequence design favors the production of soluble, folded proteins. As sequence homology captures the latent sequence information that prescribes a protein\'s overall 3D fold, utilizing evolutionary constraint ensures the design generally maintains its initial conformation upon mutation as during the interface design task. Evolutionary constraint is utilized by default, however, providing the flag "--%s" false removes this constraint. In essence, the evolutionarily observed frequencies guide the selection of amino acid types to sample during design. As an additional constraint to form bound interfaces, position specific sequence design is augmented with tertiary motifs (TERMs). TERMs represent structural motifs between a pair of naturally observed secondary structures that confer a unique sequence-structure relationship favoring their geometric displacement and interaction. As TERMs are placed across the interface, each additional TERM signifies a pair of surface residue orientations that are highly prevalent in natural protein motifs. By using associated TERM sequence information, we can ensure the designed sequence reinforces the existing structure while ensuring interface interactions. Practically speaking, TERM inclusion typically involves increasing the placement of hydrophobic residues to form a tightly packed interface core. The inclusion of this sequence structure information contrasts the typical surface environment of proteins and provides much needed interactions to favor tight interfaces free of entropically disordered water. By default, design with TERMs is enabled, however, providing the flag "--%s" false will disable this search. Finally, after specifying these position specific amino acid constraints, we explicitly design hydrogen bond networks into the interface at applicable positions and perform sequence design on the surrounding residues to promote the strongest interface possible. By default, hydrogen bond network generation occurs, however, this can be skipped with "--%s". If all of this design set up is favorable, it has the effect of utilizing hydrophobic residues to achieve tight binding, but extensive hydrophobics are interrupted by polar networks which promise to significantly maintain the protein fold and increase solubility. Finally, to prevent excessive sampling and perform rapid design on a small number of candidates to filter down to the most promising ones, provide the flag "--%s" which greatly expedites interface design at a sacrifice for ultimate sampling depth and therefore accuracy. It is not recommended to use any of the designs produced by the scout procedure, however. Instead, they should be immediately followed by the analysis module to understand which out of a handful of input poses are the most advantageous to the design task.' % (current_energy_function, structure_background, no_evolution_constraint, no_term_constraint, no_hbnet, scout)
formatted_metrics = \
    pretty_format_table([(metric, attributes['description']) for metric, attributes in sorted(master_metrics.items())])
analysis_guide = \
    'After running \'%s analysis\', the following metrics will be available for each pose (unique design configuration) selected for analysis:\n\t%s\n\nAdditionally, you can view the pose specific files [pose-id]_Trajectory.csv for comparison of different design trials for an individual pose, and [pose-id]_Residues.csv for residue specific information over the various trajectories. Usage of overall pose metrics across all poses should facilitate selection of the best configurations to move forwardwith, while Trajectory and Residue information can inform your choice of sequence selection parameters. Selection of the resulting poses can be accomplished through the %s module \'%s\'.\n\t\'%s %s -h\' will get you started.' % (program_command, '\n\t'.join(formatted_metrics), program_name, select_sequences, program_command, select_sequences)
