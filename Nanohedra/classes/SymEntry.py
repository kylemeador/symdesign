# SYMMETRY COMBINATION CONSTRUCTION WITH CYCLES 2017 (T.O.Y)
sym_comb_dict = {
    1: [1, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0,0>', 'C3', 2, ['r:<0,0,1,c>'], 1, '<e,0.577350*e,0>',
        'C6', 'p6', 2, '(2*e, 2*e), 120', 4, 6],
    2: [2, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 2, '<0,0,0>', 'C3', 2, ['r:<0,0,1,c>', 't:<0,0,d>'], 1, '<0,0,0>',
        'D3', 'D3', 0, 'N/A', 4, 2],
    3: [3, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 7, '<e,0,0>', 'C3', 2, ['r:<0,0,1,c>', 't:<0,0,d>'], 1, '<0,0,0>',
        'D3', 'p312', 2, '(2*e, 2*e), 120', 5, 6],
    4: [4, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'C3', 2, ['r:<0,0,1,c>', 't:<0,0,d>'], 4, '<0,0,0>',
        'T', 'T', 0, 'N/A', 4, 3],
    5: [5, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '0,e,0>', 'C3', 2, ['r:<0,0,1,c>', 't:<0,0,d>'], 4, '<0,0,0>',
        'T', 'I213', 3, '(4*e, 4*e, 4*e), (90, 90, 90)', 5, 10],
    6: [6, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<0,0,0>', 'C3', 2, ['r:<0,0,1,c>', 't:<0,0,d>'], 4, '<0,0,0>',
        'O', 'O', 0, 'N/A', 4, 4],
    7: [7, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<2*e,e,0>', 'C3', 2, ['r:<0,0,1,c>', 't:<0,0,d>'], 4,
        '<0,0,0>', 'O', 'P4132', 3, '(8*e, 8*e, 8*e), (90, 90, 90)', 5, 10],
    8: [8, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'C3', 2, ['r:<0,0,1,c>', 't:<0,0,d>'], 8, '<0,0,0>',
        'I', 'I', 0, 'N/A', 4, 5],
    9: [9, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0,0>', 'C4', 3, ['r:<0,0,1,c>'], 1, '<0,0,0>', 'C4', 'p4',
        2, '(2*e, 2*e), 90', 4, 4],
    10: [10, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 2, '<0,0,0>', 'C4', 3, ['r:<0,0,1,c>', 't:<0,0,d>'], 1,
         '<0,0,0>', 'D4', 'D4', 0, 'N/A', 4, 2],
    11: [11, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 9, '<0,0,0>', 'C4', 3, ['r:<0,0,1,c>', 't:<0,0,d>'], 1,
         '<e,0,0>', 'D4', 'p4212', 2, '(2*e, 2*e), 90', 5, 4],
    12: [12, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<0,0,0>', 'C4', 3, ['r:<0,0,1,c>', 't:<0,0,d>'], 1,
         '<0,0,0>', 'O', 'O', 0, 'N/A', 4, 3],
    13: [13, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<2*e,e,0>', 'C4', 3, ['r:<0,0,1,c>', 't:<0,0,d>'], 1,
         '<0,0,0>', 'O', 'I432', 3, '(4*e, 4*e, 4*e), (90, 90, 90)', 5, 8],
    14: [14, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'C5', 4, ['r:<0,0,1,c>', 't:<0,0,d>'], 10,
         '<0,0,0>', 'I', 'I', 0, 'N/A', 4, 3],
    15: [15, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0,0>', 'C6', 5, ['r:<0,0,1,c>'], 1, '<0,0,0>', 'C6',
         'p6', 2, '(2*e, 2*e), 120', 4, 3],
    16: [16, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 2, '<0,0,0>', 'C6', 5, ['r:<0,0,1,c>', 't:<0,0,d>'], 1,
         '<0,0,0>', 'D6', 'D6', 0, 'N/A', 4, 2],
    17: [17, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 7, '<e,0,0>', 'C6', 5, ['r:<0,0,1,c>', 't:<0,0,d>'], 1,
         '<0,0,0>', 'D6', 'p622', 2, '(2*e, 2*e), 120', 5, 4],
    18: [18, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,f,0>', 'D2', 6, ['None'], 1, '<0,0,0>', 'D2', 'c222', 2,
         '(4*e, 4*f), 90', 4, 4],
    19: [19, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 9, '<0,0,0>', 'D2', 6, ['None'], 1, '<e,0,0>', 'D4', 'p422', 2,
         '(2*e, 2*e), 90', 3, 4],
    20: [20, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 2, '<0,e,f>', 'D2', 6, ['None'], 5, '<0,0,0>', 'D4', 'I4122', 3,
         '(4*e, 4*e, 8*f), (90, 90, 90)', 4, 6],
    21: [21, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 11, '<0,0,0>', 'D2', 6, ['None'], 1, '<e,0,0>', 'D6', 'p622', 2,
         '(2*e, 2*e), 120', 3, 3],
    22: [22, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 11, '<0,0,e>', 'D2', 6, ['None'], 1, '<f,0,0>', 'D6', 'P6222',
         3, '(2*f, 2*f, 6*e), (90, 90, 120)', 4, 6],
    23: [23, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<0,0,0>', 'D2', 6, ['None'], 5, '<2*e,0,e>', 'O', 'I432', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 3, 4],
    24: [24, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<-2*e,3*e,0>', 'D2', 6, ['None'], 5, '<0,2*e,e>', 'O',
         'I4132', 3, '(8*e, 8*e, 8*e), (90, 90, 90)', 3, 3],
    25: [25, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 7, '<e,0,0>', 'D3', 7, ['None'], 12, '<0,0,0>', 'D3', 'p312', 2,
         '(2*e, 2*e), 120', 3, 3],
    26: [26, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 2, '<0,e,f>', 'D3', 7, ['None'], 1, '<0,0,0>', 'D3', 'R32', 3,
         '(3.4641*e, 3.4641*e, 3*f), (90, 90, 120)', 4, 4],
    27: [27, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0,0>', 'D3', 7, ['None'], 12, '<e,0.57735*e,0>', 'D6',
         'p622', 2, '(2*e, 2*e), 120', 3, 4],
    28: [28, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 2, '<0,0,0>', 'D3', 7, ['None'], 12, '<e,0.57735*e,0>', 'D6',
         'p622', 2, '(2*e, 2*e), 120', 3, 2],
    29: [29, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 2, '<0,0,0>', 'D3', 7, ['None'], 12, '<e,0.57735*e,f>', 'D6',
         'P6322', 3, '(2*e, 2*e, 4*f), (90, 90, 120)', 4, 4],
    30: [30, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'D3', 7, ['None'], 4, '<e,e,e>', 'O', 'F4132', 3,
         '(8*e, 8*e, 8*e), (90, 90, 90)', 3, 3],
    31: [31, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,2*e,0>', 'D3', 7, ['None'], 4, '<e,e,e>', 'O', 'I4132',
         3, '(8*e, 8*e, 8*e), (90, 90, 90)', 3, 2],
    32: [32, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<0,0,0>', 'D3', 7, ['None'], 4, '<e,e,e>', 'O', 'I432', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 3, 4],
    33: [33, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<0,e,-2*e>', 'D3', 7, ['None'], 4, '<e,e,e>', 'O', 'I4132',
         3, '(8*e, 8*e, 8*e), (90, 90, 90)', 3, 2],
    34: [34, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<0,e,-2*e>', 'D3', 7, ['None'], 4, '<3*e,3*e,3*e>', 'O',
         'P4132', 3, '(8*e, 8*e, 8*e), (90, 90, 90)', 3, 3],
    35: [35, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0,0>', 'D4', 8, ['None'], 1, '<0,0,0>', 'D4', 'p422', 2,
         '(2*e, 2*e), 90', 3, 2],
    36: [36, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 2, '<0,e,0>', 'D4', 8, ['None'], 1, '<0,0,0>', 'D4', 'p422', 2,
         '(2*e, 2*e), 90', 3, 2],
    37: [37, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 9, '<0,e,f>', 'D4', 8, ['None'], 1, '<0,0,0>', 'D4', 'I422', 3,
         '(2*e, 2*e, 4*f), (90, 90, 90)', 4, 4],
    38: [38, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<0,0,0>', 'D4', 8, ['None'], 1, '<0,0,e>', 'O', 'P432', 3,
         '(2*e, 2*e, 2*e), (90, 90, 90)', 3, 3],
    39: [39, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<2*e,e,0>', 'D4', 8, ['None'], 1, '<2*e,2*e,0>', 'O',
         'I432', 3, '(4*e, 4*e, 4*e), (90, 90, 90)', 3, 2],
    40: [40, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0,0>', 'D6', 9, ['None'], 1, '<0,0,0>', 'D6', 'p622', 2,
         '(2*e, 2*e), 120', 3, 2],
    41: [41, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 7, '<e,0,0>', 'D6', 9, ['None'], 1, '<0,0,0>', 'D6', 'p622', 2,
         '(2*e, 2*e), 120', 3, 2],
    42: [42, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 7, '<e,0,f>', 'D6', 9, ['None'], 1, '<0,0,0>', 'D6', 'P622', 3,
         '(2*e, 2*e, 2*f), (90, 90, 120)', 4, 4],
    43: [43, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0,0>', 'T', 10, ['None'], 1, '<0,0,0>', 'T', 'P23', 3,
         '(2*e, 2*e, 2*e), (90, 90, 90)', 3, 2],
    44: [44, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,e,0>', 'T', 10, ['None'], 1, '<0,0,0>', 'T', 'F23', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 3, 3],
    45: [45, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<2*e,3*e,0>', 'T', 10, ['None'], 1, '<0,4*e,0>', 'O',
         'F4132', 3, '(8*e, 8*e, 8*e), (90, 90, 90)', 3, 2],
    46: [46, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0,0>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'P432', 3,
         '(2*e, 2*e, 2*e), (90, 90, 90)', 3, 2],
    47: [47, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,e,0>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'F432', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 3, 2],
    48: [48, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<e,0,0>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'F432', 3,
         '(2*e, 2*e, 2*e), (90, 90, 90)', 3, 2],
    49: [49, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<0,e,0>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'P432', 3,
         '(2*e, 2*e, 2*e), (90, 90, 90)', 3, 2],
    50: [50, 'C2', 1, ['r:<0,0,1,a>', 't:<0,0,b>'], 3, '<-e,e,e>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'I432', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 3, 2],
    51: [51, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'C3', 2, ['r:<0,0,1,c>'], 1, '<e,0.57735*e,0>',
         'C3', 'p3', 2, '(2*e, 2*e), 120', 4, 3],
    52: [52, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 4, '<0,0,0>', 'C3', 2, ['r:<0,0,1,c>', 't:<0,0,d>'], 13,
         '<0,0,0>', 'T', 'T', 0, 'N/A', 4, 2],
    53: [53, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 4, '<0,0,0>', 'C3', 2, ['r:<0,0,1,c>', 't:<0,0,d>'], 13,
         '<e,0,0>', 'T', 'P213', 3, '(2*e, 2*e, 2*e), (90, 90, 90)', 5, 5],
    54: [54, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 4, '<0,0,0>', 'C4', 3, ['r:<0,0,1,c>', 't:<0,0,d>'], 1,
         '<0,0,0>', 'O', 'O', 0, 'N/A', 4, 2],
    55: [55, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 4, '<0,0,0>', 'C4', 3, ['r:<0,0,1,c>', 't:<0,0,d>'], 1,
         '<e,0,0>', 'O', 'F432', 3, '(2*e, 2*e, 2*e), (90, 90, 90)', 5, 6],
    56: [56, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 8, '<0,0,0>', 'C5', 4, ['r:<0,0,1,c>', 't:<0,0,d>'], 10,
         '<0,0,0>', 'I', 'I', 0, 'N/A', 4, 2],
    57: [57, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0.57735*e,0>', 'C6', 5, ['r:<0,0,1,c>'], 1, '<0,0,0>',
         'C6', 'p6', 2, '(2*e, 2*e), 120', 4, 2],
    58: [58, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0.57735*e,0>', 'D2', 6, ['None'], 1, '<e,0,0>', 'D6',
         'p622', 2, '(2*e, 2*e), 120', 3, 2],
    59: [59, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 4, '<0,0,0>', 'D2', 6, ['None'], 1, '<e,0,0>', 'T', 'P23', 3,
         '(2*e, 2*e, 2*e), (90, 90, 90)', 3, 3],
    60: [60, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 4, '<0,0,0>', 'D2', 6, ['None'], 3, '<e,0,e>', 'O', 'F432', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 3, 3],
    61: [61, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 4, '<0,0,0>', 'D2', 6, ['None'], 3, '<2*e,e,0>', 'O', 'I4132',
         3, '(8*e,8*e, 8*e), (90, 90, 90)', 3, 2],
    62: [62, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0.57735*e,0>', 'D3', 7, ['None'], 12, '<0,0,0>', 'D3',
         'p312', 2, '(2*e, 2*e), 120', 3, 2],
    63: [63, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0.57735*e,0>', 'D3', 7, ['None'], 1, '<0,0,0>', 'D3',
         'p321', 2, '(2*e, 2*e), 120', 3, 2],
    64: [64, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 13, '<4*e,0,0>', 'D3', 7, ['None'], 4, '<3*e,3*e,3*e>', 'O',
         'P4132', 3, '(8*e, 8*e, 8*e), (90, 90, 90)', 3, 4],
    65: [65, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 4, '<0,0,0>', 'D4', 8, ['None'], 1, '<0,0,e>', 'O', 'P432', 3,
         '(2*e, 2*e, 2*e), (90, 90, 90)', 3, 2],
    66: [66, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0.57735*e,0>', 'D6', 9, ['None'], 1, '<0,0,0>', 'D6',
         'p622', 2, '(2*e, 2*e), 120', 3, 2],
    67: [67, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 4, '<e,0,0>', 'T', 10, ['None'], 1, '<0,0,0>', 'T', 'F23', 3,
         '(2*e, 2*e, 2*e), (90, 90, 90)', 3, 2],
    68: [68, 'C3', 2, ['r:<0,0,1,a>', 't:<0,0,b>'], 4, '<e,0,0>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'F432', 3,
         '(2*e, 2*e, 2*e), (90, 90, 90)', 3, 2],
    69: [69, 'C4', 3, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'C4', 3, ['r:<0,0,1,c>'], 1, '<e,e,0>', 'C4',
         'p4', 2, '(2*e, 2*e), 90', 4, 2],
    70: [70, 'C4', 3, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'C4', 3, ['r:<0,0,1,c>', 't:<0,0,d>'], 2,
         '<0,e,e>', 'O', 'P432', 3, '(2*e, 2*e, 2*e), (90, 90, 90)', 5, 4],
    71: [71, 'C4', 3, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'D2', 6, ['None'], 1, '<e,0,0>', 'D4', 'p422', 2,
         '(2*e, 2*e), 90', 3, 2],
    72: [72, 'C4', 3, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,0,0>', 'D2', 6, ['None'], 5, '<0,0,0>', 'D4', 'p4212', 2,
         '(2*e, 2*e), 90', 3, 2],
    73: [73, 'C4', 3, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'D2', 6, ['None'], 3, '<2*e,e,0>', 'O', 'I432', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 3, 4],
    74: [74, 'C4', 3, ['r:<0,0,1,a>', 't:<0,0,b>'], 2, '<0,0,0>', 'D2', 6, ['None'], 3, '<2*e,e,0>', 'O', 'I432', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 3, 2],
    75: [75, 'C4', 3, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'D2', 6, ['None'], 3, '<e,0,e>', 'O', 'F432', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 3, 3],
    76: [76, 'C4', 3, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'D3', 7, ['None'], 4, '<e,e,e>', 'O', 'I432', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 3, 2],
    77: [77, 'C4', 3, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,e,0>', 'D4', 8, ['None'], 1, '<0,0,0>', 'D4', 'p422', 2,
         '(2*e, 2*e), 90', 3, 2],
    78: [78, 'C4', 3, ['r:<0,0,1,a>', 't:<0,0,b>'], 2, '<0,0,0>', 'D4', 8, ['None'], 1, '<e,e,0>', 'O', 'P432', 3,
         '(2*e, 2*e, 2*e), (90, 90, 90)', 3, 2],
    79: [79, 'C4', 3, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'T', 10, ['None'], 1, '<e,e,e>', 'O', 'F432', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 3, 2],
    80: [80, 'C4', 3, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<e,e,0>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'P432', 3,
         '(2*e, 2*e, 2*e), (90, 90, 90)', 3, 2],
    81: [81, 'C6', 5, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'D2', 6, ['None'], 1, '<e,0,0>', 'D6', 'p622', 2,
         '(2*e, 2*e), 120', 3, 2],
    82: [82, 'C6', 5, ['r:<0,0,1,a>', 't:<0,0,b>'], 1, '<0,0,0>', 'D3', 7, ['None'], 12, '<e,0.57735*e,0>', 'D6',
         'p622', 2, '(2*e, 2*e), 120', 3, 2],
    83: [83, 'D2', 6, ['None'], 1, '<0,0,0>', 'D2', 6, ['None'], 1, '<e,f,0>', 'D2', 'p222', 2, '(2*e, 2*f), 90', 2,
         2], 84: [84, 'D2', 6, ['None'], 1, '<0,0,0>', 'D2', 6, ['None'], 1, '<e,f,g>', 'D2', 'F222', 3,
                  '(4*e, 4*f, 4*g), (90, 90, 90)', 3, 3],
    85: [85, 'D2', 6, ['None'], 1, '<e,0,0>', 'D2', 6, ['None'], 5, '<0,0,f>', 'D4', 'P4222', 3,
         '(2*e, 2*e, 4*f), (90, 90, 90)', 2, 2],
    86: [86, 'D2', 6, ['None'], 1, '<2*e,0,0>', 'D2', 6, ['None'], 14, '<e,1.73205*e,0>', 'D6', 'p622', 2,
         '(4*e, 4*e), 120', 1, 3],
    87: [87, 'D2', 6, ['None'], 1, '<e,0,0>', 'D2', 6, ['None'], 14, '<0,0,-f>', 'D6', 'P6222', 3,
         '(2*e, 2*e, 6*f), (90, 90, 120)', 2, 2],
    88: [88, 'D2', 6, ['None'], 3, '<0,e,2*e>', 'D2', 6, ['None'], 5, '<0,2*e,e>', 'O', 'P4232', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 1, 2],
    89: [89, 'D2', 6, ['None'], 3, '<2*e,e,0>', 'D2', 6, ['None'], 5, '<0,2*e,e>', 'O', 'I4132', 3,
         '(8*e, 8*e, 8*e), (90, 90, 90)', 1, 3],
    90: [90, 'D2', 6, ['None'], 1, '<e,0,0>', 'D3', 7, ['None'], 12, '<e,0.57735*e,0>', 'D6', 'p622', 2,
         '(2*e, 2*e), 120', 1, 2],
    91: [91, 'D2', 6, ['None'], 1, '<e,0,0>', 'D3', 7, ['None'], 12, '<e,0.57735*e,f>', 'D6', 'P622', 3,
         '(2*e, 2*e, 2*f), (90, 90, 120)', 2, 2],
    92: [92, 'D2', 6, ['None'], 1, '<0,0,2*e>', 'D3', 7, ['None'], 4, '<e,e,e>', 'D6', 'P4232', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 1, 2],
    93: [93, 'D2', 6, ['None'], 3, '<2*e,e,0>', 'D3', 7, ['None'], 4, '<e,e,e>', 'O', 'I4132', 3,
         '(8*e, 8*e, 8*e), (90, 90, 90)', 1, 1],
    94: [94, 'D2', 6, ['None'], 1, '<e,0,0>', 'D4', 8, ['None'], 1, '<0,0,0>', 'D4', 'p422', 2, '(2*e, 2*e), 90', 1,
         1], 95: [95, 'D2', 6, ['None'], 1, '<e,0,f>', 'D4', 8, ['None'], 1, '<0,0,0>', 'D4', 'P422', 3,
                  '(2*e, 2*e, 2*f), (90, 90,90)', 2, 2],
    96: [96, 'D2', 6, ['None'], 5, '<e,0,f>', 'D4', 8, ['None'], 1, '<0,0,0>', 'D4', 'I422', 3,
         '(2*e, 2*e, 4*f), (90, 90,90)', 2, 2],
    97: [97, 'D2', 6, ['None'], 3, '<0,e,2*e>', 'D4', 8, ['None'], 1, '<0,0,2*e>', 'O', 'I432', 3,
         '(4*e, 4*e, 4*e), (90, 90, 90)', 1, 1],
    98: [98, 'D2', 6, ['None'], 1, '<e,0,0>', 'D6', 9, ['None'], 1, '<0,0,0>', 'D6', 'p622', 2, '(2*e, 2*e), 120',
         1, 1],
    99: [99, 'D2', 6, ['None'], 1, '<e,0,f>', 'D6', 9, ['None'], 1, '<0,0,0>', 'D6', 'P622', 3,
         '(2*e, 2*e, 2*f), (90, 90, 120)', 2, 2],
    100: [100, 'D2', 6, ['None'], 1, '<e,0,0>', 'T', 10, ['None'], 1, '<0,0,0>', 'T', 'P23', 3,
          '(2*e, 2*e, 2*e), (90, 90, 90)', 1, 1],
    101: [101, 'D2', 6, ['None'], 1, '<e,e,0>', 'T', 10, ['None'], 1, '<0,0,0>', 'T', 'P23', 3,
          '(2*e, 2*e, 2*e), (90, 90, 90)', 1, 2],
    102: [102, 'D2', 6, ['None'], 3, '<e,0,e>', 'T', 10, ['None'], 1, '<e,e,e>', 'O', 'F432', 3,
          '(4*e, 4*e, 4*e), (90, 90, 90)', 1, 1],
    103: [103, 'D2', 6, ['None'], 3, '<2*e,e,0>', 'T', 10, ['None'], 1, '<0,0,0>', 'O', 'P4232', 3,
          '(4*e, 4*e, 4*e), (90, 90, 90)', 1, 2],
    104: [104, 'D2', 6, ['None'], 3, '<e,0,e>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'F432', 3,
          '(4*e, 4*e, 4*e), (90, 90, 90)', 1, 1],
    105: [105, 'D2', 6, ['None'], 3, '<2*e,e,0>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'I432', 3,
          '(4*e, 4*e, 4*e), (90, 90, 90)', 1, 2],
    106: [106, 'D3', 7, ['None'], 12, '<0,0,0>', 'D3', 7, ['None'], 12, '<e,0.57735*e,0>', 'D3', 'p312', 2,
          '(2*e, 2*e), 120', 1, 1],
    107: [107, 'D3', 7, ['None'], 12, '<0,0,0>', 'D3', 7, ['None'], 12, '<e,0.57735*e,f>', 'D3', 'P312', 3,
          '(2*e, 2*e, 2*f), (90, 90, 120)', 2, 2],
    108: [108, 'D3', 7, ['None'], 1, '<0,0,0>', 'D3', 7, ['None'], 12, '<e,0.57735*e,f>', 'D6', 'P6322', 3,
          '(2*e, 2*e, 4*f), (90, 90, 120)', 2, 2],
    109: [109, 'D3', 7, ['None'], 4, '<e,e,e>', 'D3', 7, ['None'], 13, '<e,3*e,e>', 'O', 'P4232', 3,
          '(4*e, 4*e, 4*e), (90, 90, 90)', 1, 2],
    110: [110, 'D3', 7, ['None'], 4, '<3*e,3*e,3*e>', 'D3', 7, ['None'], 13, '<e,3*e,5*e>', 'O', 'P4132', 3,
          '(8*e, 8*e, 8*e), (90, 90, 90)', 1, 1],
    111: [111, 'D3', 7, ['None'], 4, '<e,e,e>', 'D4', 8, ['None'], 1, '<0,0,2*e>', 'O', 'I432', 3,
          '(4*e, 4*e, 4*e), (90, 90, 90)', 1, 2],
    112: [112, 'D3', 7, ['None'], 12, '<e,0.57735*e,0>', 'D6', 9, ['None'], 1, '<0,0,0>', 'D6', 'p622', 2,
          '(2*e, 2*e), 120', 1, 1],
    113: [113, 'D3', 7, ['None'], 12, '<e,0.57735*e,f>', 'D6', 9, ['None'], 1, '<0,0,0>', 'D6', 'P622', 3,
          '(2*e, 2*e, 2*f), (90, 90, 120)', 2, 2],
    114: [114, 'D3', 7, ['None'], 4, '<e,e,e>', 'T', 10, ['None'], 1, '<0,0,0>', 'O', 'F4132', 3,
          '(8*e, 8*e, 8*e), (90, 90, 90)', 1, 1],
    115: [115, 'D3', 7, ['None'], 4, '<e,e,e>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'I432', 3,
          '(4*e, 4*e, 4*e), (90, 90, 90)', 1, 1],
    116: [116, 'D4', 8, ['None'], 1, '<0,0,0>', 'D4', 8, ['None'], 1, '<e,e,0>', 'D4', 'p422', 2, '(2*e, 2*e), 90',
          1, 1], 117: [117, 'D4', 8, ['None'], 1, '<0,0,0>', 'D4', 8, ['None'], 1, '<e,e,f>', 'D4', 'P422', 3,
                       '(2*e, 2*e, 2*f), (90, 90,90)', 2, 2],
    118: [118, 'D4', 8, ['None'], 1, '<0,0,e>', 'D4', 8, ['None'], 2, '<0,e,e>', 'O', 'P432', 3,
          '(2*e, 2*e, 2*e), (90, 90, 90)', 1, 1],
    119: [119, 'D4', 8, ['None'], 1, '<0,0,e>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'P432', 3,
          '(2*e, 2*e, 2*e), (90, 90, 90)', 1, 1],
    120: [120, 'D4', 8, ['None'], 1, '<e,e,0>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'P432', 3,
          '(2*e, 2*e, 2*e), (90, 90, 90)', 1, 1],
    121: [121, 'T', 10, ['None'], 1, '<0,0,0>', 'T', 10, ['None'], 1, '<e,e,e>', 'T', 'F23', 3,
          '(4*e, 4*e, 4*e), (90, 90, 90)', 1, 1],
    122: [122, 'T', 10, ['None'], 1, '<0,0,0>', 'T', 10, ['None'], 1, '<e,0,0>', 'T', 'F23', 3,
          '(2*e, 2*e, 2*e), (90, 90, 90)', 1, 1],
    123: [123, 'T', 10, ['None'], 1, '<e,e,e>', 'O', 11, ['None'], 1, '<0,0,0>', 'O', 'F432', 3,
          '(4*e, 4*e, 4*e), (90, 90, 90)', 1, 1],
    124: [124, 'O', 11, ['None'], 1, '<0,0,0>', 'O', 11, ['None'], 1, '<e,e,e>', 'O', 'P432', 3,
          '(2*e, 2*e, 2*e), (90, 90, 90)', 1, 1],
    125: [125, 'O', 11, ['None'], 1, '<0,0,0>', 'O', 11, ['None'], 1, '<e,0,0>', 'O', 'F432', 3,
          '(2*e, 2*e, 2*e), (90, 90, 90)', 1, 1]}

# ROTATION RANGE DEG
C2 = 180
C3 = 120
C4 = 90
C5 = 72
C6 = 60
RotRangeDict = {"C2": C2, "C3": C3, "C4": C4, "C5": C5, "C6": C6}

# ROTATION SETTING MATRICES
RotMat1 = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]  # identity
RotMat2 = [[0.0, 0.0, 1.0], [0.0, 1.0, 0.0], [-1.0, 0.0, 0.0]]  # z goes to x; y unaffected
RotMat3 = [[0.707107, 0.0, 0.707107], [0.0, 1.0, 0.0], [-0.707107, 0.0, 0.707107]]  # z goes to [1,0,1] direction; y unaffected
RotMat4 = [[0.707107, 0.408248, 0.577350], [-0.707107, 0.408248, 0.577350], [0.0, -0.816497, 0.577350]]  # z goes to [1,1,1] direction; x goes to [1,-1,0] direction
RotMat5 = [[0.707107, 0.707107, 0.0], [-0.707107, 0.707107, 0.0], [0.0, 0.0, 1.0]]  # 45 degrees about z; z unaffected; x goes to [1,-1,0] direction
RotMat6 = [[1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, -1.0, 0.0]]  # x unaffected; y goes to [0,0,-1]; z goes to [0,1,0]
RotMat7 = [[1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, -1.0, 0.0]]  # z goes to y; x unaffected
RotMat8 = [[1.0, 0.0, 0.0], [0.0, 0.934172, 0.356822], [0.0, -0.356822, 0.934172]]  # rotation about x by 20.9052 degrees (to put 3-fold in icosahedral direction) - N.B. this choice has the 2-fold nearest to z falling in the x-z plane
RotMat9 = [[0.0, 0.707107, 0.707107], [0.0, -0.707107, 0.707107], [1.0, 0.0, 0.0]]  # z goes to xy diagonal;x goes to z; y goes to [1,-1,0]
RotMat10 = [[0.850651, 0.0, 0.525732], [0.0, 1.0, 0.0], [-0.525732, 0.0, 0.850651]]  # rotation about y by 31.7175 degrees (to put 5-fold in icosahedral direction)
RotMat11 = [[0.0, 0.5, 0.866025], [0.0, -0.866025, 0.5], [1.0, 0.0, 0.0]]  # z goes to xy plane at 30 degrees to x; x goes to z
RotMat12 = [[0.0, -1.0, 0.0], [1.0, 0.0, 0.0], [0.0, 0.0, 1.0]]  # 90 degree rotation about z
RotMat13 = [[0.707107, -0.408248, 0.577350], [0.707107, 0.408248, -0.577350], [0.0, 0.816497, 0.577350]]  # z goes to [1,-1,1] direction; x goes to [1,1,0] direction
RotMat14 = [[0.5, -0.866025, 0.0], [0.866025, 0.5, 0.0], [0.0, 0.0, 1.0]]  # 60 degrees about z
RotSetDict = {1: RotMat1, 2: RotMat2, 3: RotMat3, 4: RotMat4, 5: RotMat5, 6: RotMat6, 7: RotMat7, 8: RotMat8, 9: RotMat9, 10: RotMat10, 11: RotMat11, 12: RotMat12, 13: RotMat13, 14: RotMat14}


class SymEntry:

    def __init__(self, entry):
        if type(entry) == int and entry in range(1, 126):
            # GETTING ENTRY INFORMATION FROM sym_comb_dict
            self.entry_number = entry
            sym_comb_info = sym_comb_dict[self.entry_number]

            # ASSIGNING CLASS VARIABLES
            self.group1 = sym_comb_info[1]
            self.group1_indx = sym_comb_info[2]
            self.int_dof_group1 = sym_comb_info[3]
            self.rot_set_group1 = sym_comb_info[4]
            self.ref_frame_tx_dof_group1 = sym_comb_info[5]
            self.group2 = sym_comb_info[6]
            self.group2_indx = sym_comb_info[7]
            self.int_dof_group2 = sym_comb_info[8]
            self.rot_set_group2 = sym_comb_info[9]
            self.ref_frame_tx_dof_group2 = sym_comb_info[10]
            self.pt_grp = sym_comb_info[11]
            self.result = sym_comb_info[12]
            self.dim = sym_comb_info[13]
            self.unit_cell = sym_comb_info[14]
            self.tot_dof = sym_comb_info[15]
            self.cycle_size = sym_comb_info[16]

        else:
            raise ValueError('\033[1m' + "INVALID SYMMETRY ENTRY. SUPPORTED VALUES ARE: 1 to 125" + '\033[0m')

    def get_group1_sym(self):
        return self.group1

    def get_group2_sym(self):
        return self.group2

    def get_pt_grp_sym(self):
        return self.pt_grp

    def get_rot_range_deg_1(self):
        if self.group1 in RotRangeDict:
            return RotRangeDict[self.group1]
        else:
            return 0

    def get_rot_range_deg_2(self):
        if self.group2 in RotRangeDict:
            return RotRangeDict[self.group2]
        else:
            return 0

    def get_rot_set_mat_group1(self):
        return RotSetDict[self.rot_set_group1]

    def get_ref_frame_tx_dof_group1(self):
        return self.ref_frame_tx_dof_group1

    def get_rot_set_mat_group2(self):
        return RotSetDict[self.rot_set_group2]

    def get_ref_frame_tx_dof_group2(self):
        return self.ref_frame_tx_dof_group2

    def get_result_design_sym(self):
        return self.result

    def get_design_dim(self):
        return self.dim

    def get_uc_spec_string(self):
        return self.unit_cell

    def is_internal_tx1(self):
        if 't:<0,0,b>' in self.int_dof_group1:
            return True
        else:
            return False

    def is_internal_tx2(self):
        if 't:<0,0,d>' in self.int_dof_group2:
            return True
        else:
            return False

    def get_internal_tx1(self):
        if 't:<0,0,b>' in self.int_dof_group1:
            return 't:<0,0,b>'
        else:
            return None

    def get_internal_tx2(self):
        if 't:<0,0,d>' in self.int_dof_group2:
            return 't:<0,0,d>'
        else:
            return None

    def is_internal_rot1(self):
        if 'r:<0,0,1,a>' in self.int_dof_group1:
            return True
        else:
            return False

    def is_internal_rot2(self):
        if 'r:<0,0,1,c>' in self.int_dof_group2:
            return True
        else:
            return False

    def get_internal_rot1(self):
        if 'r:<0,0,1,a>' in self.int_dof_group1:
            return 'r:<0,0,1,a>'
        else:
            return None

    def get_internal_rot2(self):
        if 'r:<0,0,1,c>' in self.int_dof_group2:
            return 'r:<0,0,1,c>'
        else:
            return None

    def is_ref_frame_tx_dof1(self):
        if self.ref_frame_tx_dof_group1 != '<0,0,0>':
            return True
        else:
            return False

    def is_ref_frame_tx_dof2(self):
        if self.ref_frame_tx_dof_group2 != '<0,0,0>':
            return True
        else:
            return False


